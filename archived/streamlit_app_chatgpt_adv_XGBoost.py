import streamlit as st
import pandas as pd
import numpy as np
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder

# ----- Hu·∫•n luy·ªán m√¥ h√¨nh AI XGBoost -----
def train_model():
    np.random.seed(42)
    n_samples = 200
    data = {
        "gi√°_p1": np.random.uniform(20, 100, n_samples),
        "gi√°_p2": np.random.uniform(20, 100, n_samples),
        "gi√°_p3": np.random.uniform(20, 100, n_samples),
        "gi√°_p4": np.random.uniform(20, 100, n_samples),
        "gi√°_p5": np.random.uniform(20, 100, n_samples),
        "l√£i_l·ªó_%": np.random.uniform(-20, 40, n_samples),
        "lo·∫°i_danh_m·ª•c": np.random.choice(["D√†i h·∫°n", "Trung h·∫°n", "Ng·∫Øn h·∫°n"], n_samples),
    }
    df = pd.DataFrame(data)
    df["nh√£n_xu_h∆∞·ªõng"] = np.where(df["gi√°_p5"] > df["gi√°_p4"], "TƒÉng", "Gi·∫£m")

    le_type = LabelEncoder()
    le_label = LabelEncoder()

    df["lo·∫°i_encoded"] = le_type.fit_transform(df["lo·∫°i_danh_m·ª•c"])
    df["label_encoded"] = le_label.fit_transform(df["nh√£n_xu_h∆∞·ªõng"])

    X = df[["gi√°_p1", "gi√°_p2", "gi√°_p3", "gi√°_p4", "gi√°_p5", "l√£i_l·ªó_%", "lo·∫°i_encoded"]]
    y = df["label_encoded"]

    model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
    model.fit(X, y)

    return model, le_type, le_label

model, label_encoder_type, label_encoder_y = train_model()

# ----- Giao di·ªán Streamlit -----
st.title("üåê H·ªá th·ªëng AI h·ªó tr·ª£ ƒë·∫ßu t∆∞ ch·ª©ng kho√°n (XGBoost)")

st.markdown("""
**Nh·∫≠p th√¥ng tin d·ªØ li·ªáu c·ªï phi·∫øu:**
""")

ma_cp = st.text_input("M√£ c·ªï phi·∫øu", "FPT")
loai_dm = st.selectbox("Lo·∫°i danh m·ª•c", ["D√†i h·∫°n", "Trung h·∫°n", "Ng·∫Øn h·∫°n"])

gi√°_p1 = st.number_input("Gi√° ƒë√≥ng c·ª≠a phi√™n 1", 0.0, 1000.0, 90.0)
gi√°_p2 = st.number_input("Gi√° ƒë√≥ng c·ª≠a phi√™n 2", 0.0, 1000.0, 92.0)
gi√°_p3 = st.number_input("Gi√° ƒë√≥ng c·ª≠a phi√™n 3", 0.0, 1000.0, 91.5)
gi√°_p4 = st.number_input("Gi√° ƒë√≥ng c·ª≠a phi√™n 4", 0.0, 1000.0, 94.0)
gi√°_p5 = st.number_input("Gi√° ƒë√≥ng c·ª≠a phi√™n 5", 0.0, 1000.0, 95.0)

lai_lo = st.number_input("L√£i/L·ªó (%)", -100.0, 100.0, 5.0)

if st.button("‚ú® Ph√¢n t√≠ch v√† khuy·∫øn ngh·ªã"):
    loai_encoded = label_encoder_type.transform([loai_dm])[0]
    X_input = [[gi√°_p1, gi√°_p2, gi√°_p3, gi√°_p4, gi√°_p5, lai_lo, loai_encoded]]

    xu_huong_encoded = model.predict(X_input)[0]
    xu_huong = label_encoder_y.inverse_transform([xu_huong_encoded])[0]

    # Logic khuy·∫øn ngh·ªã
    if xu_huong == "TƒÉng" and lai_lo < 20:
        khuyen_nghi = "GI·ªÆ HO·∫∂C MUA TH√äM"
    elif xu_huong == "Gi·∫£m" and lai_lo > 15:
        khuyen_nghi = "B√ÅN CH·ªêT L·ªúI"
    elif xu_huong == "Gi·∫£m" and lai_lo < -10:
        khuyen_nghi = "B√ÅN C·∫ÆT L·ªñ"
    elif xu_huong == "Gi·∫£m" and -10 <= lai_lo <= 15:
        khuyen_nghi = "GI·ªÆ CH·ªú TH√äM"
    else:
        khuyen_nghi = "KH√îNG R√ï - C·∫¶N XEM X√âT TH√äM"

    st.success(f"**Xu h∆∞·ªõng d·ª± ƒëo√°n:** {xu_huong}")
    st.info(f"**Khuy·∫øn ngh·ªã:** {khuyen_nghi}")
